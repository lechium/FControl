//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

@class NSDateFormatter, NSMutableDictionary, NSMutableSet, NSString;

@interface BeaconFMDatabase : NSObject
{
    struct sqlite3 *_db;	// 8 = 0x8
    NSString *_databasePath;	// 16 = 0x10
    _Bool _logsErrors;	// 24 = 0x18
    _Bool _crashOnErrors;	// 25 = 0x19
    _Bool _traceExecution;	// 26 = 0x1a
    _Bool _checkedOut;	// 27 = 0x1b
    _Bool _shouldCacheStatements;	// 28 = 0x1c
    _Bool _isExecutingStatement;	// 29 = 0x1d
    _Bool _inTransaction;	// 30 = 0x1e
    double _maxBusyRetryTimeInterval;	// 32 = 0x20
    double _startBusyRetryTime;	// 40 = 0x28
    NSMutableDictionary *_cachedStatements;	// 48 = 0x30
    NSMutableSet *_openResultSets;	// 56 = 0x38
    NSMutableSet *_openFunctions;	// 64 = 0x40
    NSDateFormatter *_dateFormat;	// 72 = 0x48
}

+ (id)storeableDateFormat:(id)arg1;	// IMP=0x000000010079d030
+ (_Bool)isSQLiteThreadSafe;	// IMP=0x000000010079c480
+ (id)sqliteLibVersion;	// IMP=0x000000010079c438
+ (int)FMDBVersion;	// IMP=0x000000010079c2ac
+ (id)FMDBUserVersion;	// IMP=0x000000010079c280
+ (id)databaseWithPath:(id)arg1;	// IMP=0x000000010079c030
@property _Bool traceExecution; // @synthesize traceExecution=_traceExecution;
@property _Bool checkedOut; // @synthesize checkedOut=_checkedOut;
@property _Bool crashOnErrors; // @synthesize crashOnErrors=_crashOnErrors;
@property _Bool logsErrors; // @synthesize logsErrors=_logsErrors;
@property(retain) NSMutableDictionary *cachedStatements; // @synthesize cachedStatements=_cachedStatements;
- (void).cxx_destruct;	// IMP=0x000000010079ff74
- (void)makeFunctionNamed:(id)arg1 maximumArguments:(int)arg2 withBlock:(CDUnknownBlockType)arg3;	// IMP=0x000000010079fda8
- (void)setShouldCacheStatements:(_Bool)arg1;	// IMP=0x000000010079fca4
- (_Bool)shouldCacheStatements;	// IMP=0x000000010079fc94
- (id)inSavePoint:(CDUnknownBlockType)arg1;	// IMP=0x000000010079fb38
- (_Bool)rollbackToSavePointWithName:(id)arg1 error:(id *)arg2;	// IMP=0x000000010079fa50
- (_Bool)releaseSavePointWithName:(id)arg1 error:(id *)arg2;	// IMP=0x000000010079f968
- (_Bool)startSavePointWithName:(id)arg1 error:(id *)arg2;	// IMP=0x000000010079f874
- (_Bool)inTransaction;	// IMP=0x000000010079f864
- (_Bool)beginTransaction;	// IMP=0x000000010079f820
- (_Bool)beginDeferredTransaction;	// IMP=0x000000010079f7dc
- (_Bool)commit;	// IMP=0x000000010079f79c
- (_Bool)rollback;	// IMP=0x000000010079f75c
- (_Bool)update:(id)arg1 withErrorAndBindings:(id *)arg2;	// IMP=0x000000010079f724
- (_Bool)executeUpdate:(id)arg1 withErrorAndBindings:(id *)arg2;	// IMP=0x000000010079f6ec
- (_Bool)executeStatements:(id)arg1 withResultBlock:(CDUnknownBlockType)arg2;	// IMP=0x000000010079f5ec
- (_Bool)executeStatements:(id)arg1;	// IMP=0x000000010079f5dc
- (_Bool)executeUpdateWithFormat:(id)arg1;	// IMP=0x000000010079f37c
- (_Bool)executeUpdate:(id)arg1 withVAList:(char *)arg2;	// IMP=0x000000010079f35c
- (_Bool)executeUpdate:(id)arg1 withParameterDictionary:(id)arg2;	// IMP=0x000000010079f2f4
- (_Bool)executeUpdate:(id)arg1 withArgumentsInArray:(id)arg2;	// IMP=0x000000010079f28c
- (_Bool)executeUpdate:(id)arg1;	// IMP=0x000000010079f250
- (_Bool)executeUpdate:(id)arg1 error:(id *)arg2 withArgumentsInArray:(id)arg3 orDictionary:(id)arg4 orVAList:(char *)arg5;	// IMP=0x000000010079e968
- (id)executeQuery:(id)arg1 withVAList:(char *)arg2;	// IMP=0x000000010079e94c
- (id)executeQuery:(id)arg1 withArgumentsInArray:(id)arg2;	// IMP=0x000000010079e8e4
- (id)executeQueryWithFormat:(id)arg1;	// IMP=0x000000010079e7dc
- (id)executeQuery:(id)arg1;	// IMP=0x000000010079e7a4
- (id)executeQuery:(id)arg1 withArgumentsInArray:(id)arg2 orDictionary:(id)arg3 orVAList:(char *)arg4;	// IMP=0x000000010079dffc
- (id)executeQuery:(id)arg1 withParameterDictionary:(id)arg2;	// IMP=0x000000010079df94
- (void)extractSQL:(id)arg1 argumentsList:(char *)arg2 intoString:(id)arg3 arguments:(id)arg4;	// IMP=0x000000010079d98c
- (void)bindObject:(id)arg1 toColumn:(int)arg2 inStatement:(struct sqlite3_stmt *)arg3;	// IMP=0x000000010079d4c0
- (int)changes;	// IMP=0x000000010079d460
- (long long)lastInsertRowId;	// IMP=0x000000010079d400
- (id)lastError;	// IMP=0x000000010079d3a0
- (id)errorWithMessage:(id)arg1;	// IMP=0x000000010079d300
- (int)lastErrorCode;	// IMP=0x000000010079d2f0
- (_Bool)hadError;	// IMP=0x000000010079d2c8
- (id)lastErrorMessage;	// IMP=0x000000010079d288
- (_Bool)databaseExists;	// IMP=0x000000010079d248
- (void)warnInUse;	// IMP=0x000000010079d224
- (_Bool)goodConnection;	// IMP=0x000000010079d1a8
- (id)stringFromDate:(id)arg1;	// IMP=0x000000010079d190
- (id)dateFromString:(id)arg1;	// IMP=0x000000010079d178
- (void)setDateFormat:(id)arg1;	// IMP=0x000000010079d140
- (_Bool)hasDateFormatter;	// IMP=0x000000010079d128
- (_Bool)setKeyWithData:(id)arg1;	// IMP=0x000000010079d028
- (_Bool)setKey:(id)arg1;	// IMP=0x000000010079cf58
- (_Bool)rekeyWithData:(id)arg1;	// IMP=0x000000010079cf50
- (_Bool)rekey:(id)arg1;	// IMP=0x000000010079ce80
- (void)setCachedStatement:(id)arg1 forQuery:(id)arg2;	// IMP=0x000000010079cd84
- (id)cachedStatementForQuery:(id)arg1;	// IMP=0x000000010079ccbc
- (void)clearCachedStatements;	// IMP=0x000000010079cb64
- (void)resultSetDidClose:(id)arg1;	// IMP=0x000000010079cb08
- (void)closeOpenResultSets;	// IMP=0x000000010079c968
- (_Bool)hasOpenResultSets;	// IMP=0x000000010079c938
- (void)setBusyRetryTimeout:(int)arg1;	// IMP=0x000000010079c8f4
- (int)busyRetryTimeout;	// IMP=0x000000010079c8ac
- (double)maxBusyRetryTimeInterval;	// IMP=0x000000010079c89c
- (void)setMaxBusyRetryTimeInterval:(double)arg1;	// IMP=0x000000010079c77c
- (_Bool)close;	// IMP=0x000000010079c6a4
- (_Bool)openWithFlags:(int)arg1 vfs:(id)arg2;	// IMP=0x000000010079c5b8
- (_Bool)openWithFlags:(int)arg1;	// IMP=0x000000010079c5a8
- (_Bool)open;	// IMP=0x000000010079c514
- (const char *)sqlitePath;	// IMP=0x000000010079c4ac
- (struct sqlite3 *)sqliteHandle;	// IMP=0x000000010079c49c
- (id)databasePath;	// IMP=0x000000010079c270
- (void)dealloc;	// IMP=0x000000010079c220
- (void)finalize;	// IMP=0x000000010079c1d0
- (id)initWithPath:(id)arg1;	// IMP=0x000000010079c0a4
- (id)init;	// IMP=0x000000010079c094
- (_Bool)validateSQL:(id)arg1 error:(id *)arg2;	// IMP=0x00000001007a0c5c
- (_Bool)columnExists:(id)arg1 columnName:(id)arg2;	// IMP=0x00000001007a0c00
- (void)setUserVersion:(unsigned int)arg1;	// IMP=0x00000001007a0b6c
- (unsigned int)userVersion;	// IMP=0x00000001007a0ae8
- (void)setApplicationID:(unsigned int)arg1;	// IMP=0x00000001007a0a54
- (unsigned int)applicationID;	// IMP=0x00000001007a09d0
- (_Bool)columnExists:(id)arg1 inTableWithName:(id)arg2;	// IMP=0x00000001007a0850
- (id)getTableSchema:(id)arg1;	// IMP=0x00000001007a07d8
- (id)getSchema;	// IMP=0x00000001007a07b4
- (_Bool)tableExists:(id)arg1;	// IMP=0x00000001007a0710
- (id)dateForQuery:(id)arg1;	// IMP=0x00000001007a0660
- (id)dataForQuery:(id)arg1;	// IMP=0x00000001007a05b0
- (double)doubleForQuery:(id)arg1;	// IMP=0x00000001007a0500
- (_Bool)boolForQuery:(id)arg1;	// IMP=0x00000001007a0454
- (long long)longForQuery:(id)arg1;	// IMP=0x00000001007a03ac
- (int)intForQuery:(id)arg1;	// IMP=0x00000001007a0300
- (id)stringForQuery:(id)arg1;	// IMP=0x00000001007a0250

@end

